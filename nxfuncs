#!/bin/bash
#
# Copyright (c) 2020 by Dmitry Borisov <i@dimbor.ru>
#
# License: GPL, version 2
#
# ========================================================================

ip4_pattern='[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+'

# following two functions are Copyright by Klaus Knopper
stringinstring() { case "$2" in *$1*) return 0;; esac; return 1; }

# Reread boot command line; echo last parameter's argument or return false.
getparam(){
	pattern=".*&$1=([^&]*)"
	str="&$CMDLINE"
	[[ $str =~ $pattern ]]
	echo ${BASH_REMATCH[1]}
	[ "$BASH_REMATCH" != "" ]
}

trim() {
	local v="$*"; v=${v#${v%%[![:space:]]*}};
	v=${v%${v##*[![:space:]]}}; echo -n "$v"
}

cutfn() {
#args: line delim field_num_start_at_0
	local IFS="$2"; local a=($1);
	#echo "${a[($3)]}" # negative values works on all systems?
	echo "${a[@]:($3):1}"
}

rematchfn(){
#args: (pattern) <text> [match_num=0] [reversive]
# if match_num == "all" returns all found matches delimited by newlines
	local pat="$1"; local n; [ -z "$3" -o "$3" = "all" ] && n=0 || n="$3"
	local OIFS=$IFS local IFS=$'\n'; local a=($2); IFS=$OIFS
	local ntl=${#a[@]}; local nr=0; local r=()
	if [ -z "$4" ]; then
		for ((i=0;i<$ntl;i++)) {
			[[ "${a[$i]}" =~ $pat ]] || continue
			((nr++)); r+=(${BASH_REMATCH[1]})
			[ "$nr" = "$n" ] && break
		}
	else
		for ((i=$ntl;i>=0;i--)) {
			[[ "${a[$i]}" =~ $pat ]] || continue
			((nr++)); r+=(${BASH_REMATCH[1]})
			[ "$nr" = "$n" ] && break
		}
	fi
	if [ "$3" = "all" ]; then
		local res=""; local r;
		for r in ${r[@]}; do res+="${res:+$'\n'}$r"; done
		echo "$res"
	else echo "${r[($n)]}"
	fi
	[ "$nr" != "0" ]
}

